[{"C:\\Users\\KewinFernando\\Desktop\\ReactApps\\my-app\\src\\index.js":"1","C:\\Users\\KewinFernando\\Desktop\\ReactApps\\my-app\\src\\reportWebVitals.js":"2","C:\\Users\\KewinFernando\\Desktop\\ReactApps\\my-app\\src\\App.js":"3","C:\\Users\\KewinFernando\\Desktop\\ReactApps\\my-app\\src\\TodoList.js":"4","C:\\Users\\KewinFernando\\Desktop\\ReactApps\\my-app\\src\\TodoListItem.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":657,"mtime":1609175780599,"results":"9","hashOfConfig":"7"},{"size":6168,"mtime":1609265708736,"results":"10","hashOfConfig":"7"},{"size":2870,"mtime":1609265727688,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"63d9ii",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\KewinFernando\\Desktop\\ReactApps\\my-app\\src\\index.js",[],["25","26"],"C:\\Users\\KewinFernando\\Desktop\\ReactApps\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\KewinFernando\\Desktop\\ReactApps\\my-app\\src\\App.js",[],"C:\\Users\\KewinFernando\\Desktop\\ReactApps\\my-app\\src\\TodoList.js",["27"],"import React, { useState, useRef } from \"react\";\r\nimport TodoListItem from \"./TodoListItem\";\r\nimport './App.css';\r\nimport { text } from \"@fortawesome/fontawesome-svg-core\";\r\n\r\nexport default function TodoList({ todos, onAddNewTodo }) {\r\n\r\n    const [desc, setDesc] = useState('');\r\n    const todoAddInput = useRef();\r\n\r\n    function handleSubmit(evt) {\r\n        evt.preventDefault();\r\n        if (!desc) return;\r\n        const newTodo = {\r\n            no: 0,\r\n            desc: desc,\r\n            date: new Date(),\r\n            isCompleted: false,\r\n            isEditing: false\r\n        };\r\n        const existingTodos = todos;\r\n        Object.assign(newTodo, { no: existingTodos.length + 1 });\r\n        existingTodos.push(newTodo);\r\n        onAddNewTodo(existingTodos);\r\n        setDesc('');\r\n        todoAddInput.current.focus();\r\n    }\r\n\r\n    function onDescChange(desc) {\r\n        setDesc(desc);\r\n    }\r\n\r\n    function handelDeleteClick(totoNo) {\r\n        const tempTodos = JSON.parse(JSON.stringify(todos));\r\n        const index = Array.from(tempTodos).findIndex(obj => {\r\n            return obj.no === totoNo;\r\n        });\r\n        if (index !== -1) {\r\n            tempTodos.splice(index, 1);\r\n            tempTodos.map((obj, i) => {\r\n                return obj.no = i + 1;\r\n            })\r\n        }\r\n        onAddNewTodo(tempTodos);\r\n    }\r\n\r\n    function handelEditClick(totoNo) {\r\n        const tempTodos = JSON.parse(JSON.stringify(todos));\r\n        // Resetting isEdit flag\r\n        tempTodos.map((obj) => {\r\n            return obj.isEditing = false;\r\n        });\r\n        // Find todo to set isEdit flag\r\n        const todo = Array.from(tempTodos).find(obj => {\r\n            return obj.no === totoNo;\r\n        });\r\n        todo.isEditing = !todo.isEditing; // Set isEdit flag\r\n        // Find todo index\r\n        const index = Array.from(tempTodos).findIndex(obj => {\r\n            return obj.no === totoNo;\r\n        });\r\n        if (index !== -1) {\r\n            // replace todo with updated flag value\r\n            tempTodos.splice(index, 1, todo);\r\n        }\r\n        onAddNewTodo(tempTodos);\r\n    }\r\n\r\n    function handelSaveClick(totoNo, newDesc) {\r\n        const tempTodos = JSON.parse(JSON.stringify(todos));\r\n        // Find todo to set isEdit flag\r\n        const todo = Array.from(tempTodos).find(obj => {\r\n            return obj.no === totoNo;\r\n        });\r\n        todo.desc = newDesc; // Set newDesc\r\n        // Find todo index\r\n        const index = Array.from(tempTodos).findIndex(obj => {\r\n            return obj.no === totoNo;\r\n        });\r\n        if (index !== -1) {\r\n            // replace todo with updated flag value\r\n            tempTodos.splice(index, 1, todo);\r\n        }\r\n        tempTodos.map((obj) => {\r\n            return obj.isEditing = false;\r\n        });\r\n        onAddNewTodo(tempTodos);\r\n    }\r\n\r\n    function handelCancelClick() {\r\n        const tempTodos = JSON.parse(JSON.stringify(todos));\r\n        tempTodos.map((obj) => {\r\n            return obj.isEditing = false;\r\n        });\r\n        const x = [...tempTodos]\r\n        onAddNewTodo(x);\r\n    }\r\n\r\n    function handelCompleteToggle(toDo) {\r\n        const tempTodos = JSON.parse(JSON.stringify(todos));\r\n        // Find todo index\r\n        const index = Array.from(tempTodos).findIndex(obj => {\r\n            return obj.no === toDo.no;\r\n        });\r\n        // Find todo to set isEdit flag\r\n        const todo = Array.from(tempTodos).find(obj => {\r\n            return obj.no === toDo.no;\r\n        });\r\n        todo.isCompleted = !todo.isCompleted; // Toggle isCompleted\r\n        if (index !== -1) {\r\n            // replace todo with updated flag value\r\n            tempTodos.splice(index, 1, todo);\r\n        }\r\n        onAddNewTodo(tempTodos);\r\n    }\r\n\r\n    function getPendingTasksCountText() {\r\n\r\n        let text = '';\r\n        const pendingTasksCount = todos.length - todos.filter(obj => { return obj.isCompleted }).length;\r\n\r\n        if (pendingTasksCount === 1) {\r\n            text = `You have ${pendingTasksCount} task to complete.`\r\n        } else if (pendingTasksCount > 1) {\r\n            text = `You have ${pendingTasksCount} tasks to complete.`\r\n        } else {\r\n            if (todos.length) {\r\n                text = 'All Completed !!'\r\n            } else {\r\n                text = 'Nothing Yet !!'\r\n            }\r\n        }\r\n\r\n        return text;\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className=\"todo-wrapper\">\r\n\r\n                <div className=\"header-wrapper\">\r\n                    <h3>Welcome Kewin</h3>\r\n                    <h5>{getPendingTasksCountText()}</h5>\r\n                </div>\r\n\r\n                <form onSubmit={handleSubmit} className=\"form-wrapper\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={desc}\r\n                        onChange={e => onDescChange(e.target.value)}\r\n                        className=\"todo-add-input\"\r\n                        autoFocus={true}\r\n                        ref={todoAddInput}\r\n                    />\r\n                    <input type=\"submit\" value=\"Add\" className=\"todo-add-submit\" />\r\n                </form>\r\n\r\n                <div className=\"todo-item-wrapper\">\r\n                    {\r\n                        todos.map((value, index) => {\r\n                            return (\r\n                                <div className=\"todo-item\" key={index} >\r\n                                    <TodoListItem\r\n                                        key={index}\r\n                                        todo={value}\r\n                                        onDeleteClickEmit={handelDeleteClick}\r\n                                        onEditClickEmit={handelEditClick}\r\n                                        onSaveClickEmit={handelSaveClick}\r\n                                        onCancelClickEmit={handelCancelClick}\r\n                                        onTodoCompleteToggleEmit={handelCompleteToggle} />\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n","C:\\Users\\KewinFernando\\Desktop\\ReactApps\\my-app\\src\\TodoListItem.js",["28"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport './App.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport default function TodoListItem({ todo, onDeleteClickEmit, onEditClickEmit, onSaveClickEmit, onCancelClickEmit, onTodoCompleteToggleEmit }) {\r\n\r\n    const [newDesc, setNewDesc] = useState(todo.desc);\r\n    const saveBtn = useRef();\r\n    const todoInput = useRef();\r\n\r\n    function onDeleteClick(todoNo) {\r\n        onDeleteClickEmit(todoNo)\r\n    }\r\n\r\n    function onEditClick(todoNo) {\r\n        todoInput.current.focus()\r\n        onEditClickEmit(todoNo)\r\n    }\r\n\r\n    function onSaveClick(todoNo, newDesc) {\r\n        onSaveClickEmit(todoNo, newDesc)\r\n    }\r\n\r\n    function getTodoActionButtons(todo) {\r\n        if (!todo.isEditing)\r\n            return (\r\n                <button className=\"todo-action-btns edit-btn\" onClick={e => onEditClick(todo.no)} disabled={todo.isCompleted}>\r\n                    <FontAwesomeIcon icon={[\"fas\", \"edit\"]} />\r\n                </button>\r\n            )\r\n        else\r\n            return (\r\n                <button ref={saveBtn} className=\"todo-action-btns save-btn\" onClick={e => onSaveClick(todo.no, newDesc)} disabled={todo.isCompleted}>\r\n                    <FontAwesomeIcon icon={[\"fas\", \"save\"]} />\r\n                </button>\r\n            )\r\n    }\r\n\r\n    function onDescChange(desc) {\r\n        setNewDesc(desc);\r\n    }\r\n\r\n    function onInputBlur(e) {\r\n        if (saveBtn.current && saveBtn.current.contains(e.relatedTarget)) {\r\n            // clicked saved\r\n            todo.isEditing = false;\r\n            return;\r\n        } else {\r\n            onCancelClickEmit();\r\n            setNewDesc(todo.desc); // setting old desc\r\n\r\n        }\r\n    }\r\n\r\n    function onClickTodo() {\r\n        if (todo.isEditing) return;\r\n        onTodoCompleteToggleEmit(todo);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <span className=\"no\">{todo.no} {todo.isCompleted} </span>\r\n            <input type=\"text\" readOnly={!todo.isEditing} value={newDesc}\r\n                onChange={e => onDescChange(e.target.value)}\r\n                onClick={e => onClickTodo()}\r\n                onBlur={e => onInputBlur(e)}\r\n                className={`\r\n                    todo-input\r\n                    ${todo.isEditing ? 'is-editing' : ''}\r\n                    ${todo.isCompleted ? 'strike-through' : ''}\r\n                `}\r\n                ref={todoInput} />\r\n            {getTodoActionButtons(todo)}\r\n            <button className=\"todo-action-btns\" onClick={e => onDeleteClick(todo.no)}>\r\n                <FontAwesomeIcon icon={[\"fas\", \"trash\"]} />\r\n            </button>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n//className={todo.isEditing && !todo.isCompleted ? 'todo-input is-editing' : 'todo-input' + todo.isCompleted && !todo.isEditing ? 'todo-input strike-through' : 'todo-input'}\r\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":4,"column":10,"nodeType":"35","messageId":"36","endLine":4,"endColumn":14},{"ruleId":"33","severity":1,"message":"37","line":1,"column":35,"nodeType":"35","messageId":"36","endLine":1,"endColumn":44},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-unused-vars","'text' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]